/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.84
 * Generated at: 2024-01-30 13:53:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import javax.xml.crypto.dsig.keyinfo.RetrievalMethod;
import communal.dao.GetMaxAutoIncrement;
import communal.dao.UserIdTranslation;
import communal.dao.RecipeIdTranslation;
import communal.StringAlignment;
import communal.ReadFile;
import communal.dao.ReturnRecipeID;
import communal.dao.DeleteRecipeId;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Set;
import java.io.File;
import communal.dao.UserIdTranslation;
import communal.dao.UserIdTranslation;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/./allSource/includeTemplateJspFile/header.jsp", Long.valueOf(1705385273949L));
    _jspx_dependants.put("/allSource/includeTemplateJspFile/head.jsp", Long.valueOf(1704520777819L));
    _jspx_dependants.put("/allSource/includeTemplateJspFile/footer.jsp", Long.valueOf(1703930086160L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javax.xml.crypto.dsig.keyinfo.RetrievalMethod");
    _jspx_imports_classes.add("java.util.HashSet");
    _jspx_imports_classes.add("communal.dao.DeleteRecipeId");
    _jspx_imports_classes.add("communal.dao.GetMaxAutoIncrement");
    _jspx_imports_classes.add("communal.dao.RecipeIdTranslation");
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("communal.dao.ReturnRecipeID");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("communal.dao.UserIdTranslation");
    _jspx_imports_classes.add("communal.StringAlignment");
    _jspx_imports_classes.add("communal.ReadFile");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
 //文字エンコードの指定
	request.setCharacterEncoding("UTF-8");
	response.setCharacterEncoding("UTF-8");
	
	//パスの所得
	String userLogPath = getServletContext().getRealPath("./UserLog/");
	

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"jp\">\n");
      out.write("\n");
      out.write('\n');
 //文字エンコードの指定
	request.setCharacterEncoding("UTF-8");
	response.setCharacterEncoding("UTF-8");

      out.write("\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <script src=\"./allSource/css/bootstrap-5.3.0-dist/js/bootstrap.js\"></script>\n");
      out.write("    <link rel=\"stylesheet\" href=\"./allSource/styleSheet/normalize.css\">\n");
      out.write("    <link rel=\"stylesheet\" href=\"./allSource/styleSheet/bootstrap-5.3.0-dist/css/bootstrap.css\">\n");
      out.write("    <link rel=\"stylesheet\" href=\"./allSource/styleSheet/comon.css\">\n");
      out.write("    <link rel=\"icon\" href=\"./allSource/image/topIcon/KichX_icon.gif\">\n");
      out.write("    <script src=\"./allSource/javaScript/rigthDataSpacealEvent.js\"></script>\n");
      out.write("    <script src=\"./allSource/javaScript/tapHeartEvent.js\"></script>\n");
      out.write("    <title>KichX</title\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("	");
      out.write('\n');
      out.write('\n');
      out.write('\n');
 //文字エンコードの指定
	request.setCharacterEncoding("UTF-8");
	response.setCharacterEncoding("UTF-8");

      out.write('\n');

	//sessionのデータを読み込む
	String user_id = (String)session.getAttribute("user_id");

      out.write("\n");
      out.write("<header>\n");
      out.write("        <!-- トップ_ログインや一言コメント -->\n");
      out.write("        <div id=\"topHeader\" class=\"custom-line\">\n");
      out.write("            <div class=\"flex\">\n");
      out.write("                <p class=\"tag grid\">日々の料理に新しいときめきを。</p>\n");
      out.write("            </div>\n");
      out.write("            <div class=\"flex\">\n");
      out.write("            	");
 if (user_id == null) { 
      out.write("\n");
      out.write("                	<a href=\"./login.jsp\" class=\"taga\">ログイン</a>\n");
      out.write("                	<a href=\"./register.jsp\" class=\"taga\">新規登録</a>\n");
      out.write("                ");
 }else{
                	UserIdTranslation.Translation(user_id);
                	String name = UserIdTranslation.GetUserName(); 
                
      out.write("\n");
      out.write("                	<p class=\"grid\">");
      out.print( name );
      out.write("さん、おかえりなさい</p>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("\n");
      out.write("        <!-- 検索やMyレシピへのアクセス -->\n");
      out.write("        <div id=\"bottomHeader\" class=\"custom-line\">\n");
      out.write("            <div class=\"flex\">\n");
      out.write("                <div class=\"flex\">\n");
      out.write("                    <a href=\"./index.jsp\"><img src=\"./allSource/image/topIcon/KichX_icon.gif\" alt=\"KichXアイコン\" class=\"img\"></a>\n");
      out.write("                    <h1 class=\"grid\">KichX</h1>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"center\">\n");
      out.write("                    <div>\n");
      out.write("                        <form action=\"./search.jsp\" method=\"post\" id=\"formHeader\" class=\"flex\">\n");
      out.write("                            <input type=\"text\" class=\"formText\" placeholder=\"鶏肉・キャベツ・にんじん・豚バラ\" name=\"searchData\">\n");
      out.write("                            <button type=\"submit\" class=\"formSubmit\">\n");
      out.write("                                レシピ検索\n");
      out.write("                            </button>\n");
      out.write("                        </form>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("            <div class=\"flex\">\n");
      out.write("				<a href=\"/employmentWorks/myrecipe\" id=\"myRecipe\" class=\"grid flex\"> <img\n");
      out.write("					src=\"./allSource/image/icon/archive.svg\" alt=\"ファイル\" class=\"icon\">\n");
      out.write("					<p>Myレシピ</p>\n");
      out.write("				</a>\n");
      out.write("                <a href=\"./writerecipe.jsp\" id=\"WriteRecipe\" class=\"grid flex\">\n");
      out.write("                    <img src=\"./allSource/image/icon/brush.svg\" alt=\"ペン\" class=\"icon\">\n");
      out.write("                    <p>レシピを書く</p>\n");
      out.write("                </a>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("        </div>\n");
      out.write("    </header>");
      out.write("\n");
      out.write("\n");
      out.write("	<main>\n");
      out.write("		<!-- メイン部_右ナビゲーションからレシピ一覧まで -->\n");
      out.write("		<div class=\"mainLeft\">\n");
      out.write("			<div class=\"mainLeftContent flex\">\n");
      out.write("				<!-- ナビケーション部_各種関連ページへの移動 -->\n");
      out.write("				<nav id=\"selection\">\n");
      out.write("					<h5>各種サービス</h5>\n");
      out.write("					<ul>\n");
      out.write("						<li><img src=\"./allSource/image/icon/binoculars.svg\" alt=\"履歴\">\n");
      out.write("							<a href=\"/employmentWorks/log\">最近見たレシピ</a></li>\n");
      out.write("						</li>\n");
      out.write("					</ul>\n");
      out.write("					");
 if(user_id != null){ 
      out.write("\n");
      out.write("					<ul>\n");
      out.write("						<li><img src=\"./allSource/image/icon/emoji-wink.svg\" alt=\"家族\">\n");
      out.write("							<a href=\"/employmentWorks/logout\">ログアウト</a></li>\n");
      out.write("						<li><img src=\"./allSource/image/icon/trash.svg\" alt=\"家族\">\n");
      out.write("							<a href=\"/employmentWorks/trashlog\">履歴の削除</a></li>\n");
      out.write("					</ul>\n");
      out.write("					");
 } 
      out.write("\n");
      out.write("				</nav>\n");
      out.write("\n");
      out.write("\n");
      out.write("				<!-- メインのトップ画 -->\n");
      out.write("				<div id=\"PickUpRecipes\">\n");
      out.write("					<div class=\"bigCookPhoto\">\n");
      out.write("						<h5>\n");
      out.write("							<a href=\"./maindish.jsp\">本日のおすすめ</a>\n");
      out.write("						</h5>\n");
      out.write("						<p>\n");
      out.write("							今日のおかずに迷ってる？<br>なら見てみよう！\n");
      out.write("						</p>\n");
      out.write("						<img src=\"./allSource/image/cook/katu.jpeg\" alt=\"料理\">\n");
      out.write("					</div>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("			<!-- メインレシピ記載部 -->\n");
      out.write("			<div class=\"mainLeftContent\">\n");
      out.write("				<h6 id=\"mainDish\">\n");
      out.write("					<a href=\"./maindish.jsp\">本日のおすすめ</a>\n");
      out.write("				</h6>\n");
      out.write("				<!-- レシピをくし返し出力する -->\n");
      out.write("				");

				String ReturnRecipeIdTmp = ReturnRecipeID.Get();
				String[] ReturnRecipeID = ReturnRecipeIdTmp.split(",");
				for(String i : ReturnRecipeID){
					
					//レシピIDを元に各種データを手にいれる
					RecipeIdTranslation.Translation(String.valueOf(i));
					//ユーザIDを元に各種データを手にいれる
					UserIdTranslation.Translation(RecipeIdTranslation.GetUserID());
				
      out.write("\n");
      out.write("				<div class=\"allRecipe\">\n");
      out.write("					<img src=\"./RecipeFile/");
      out.print( i );
      out.write("/recipe_top_image.jpg\" alt=\"料理\"\n");
      out.write("						class=\"recipePhoto\">\n");
      out.write("					<div>\n");
      out.write("						<form id=\"writeRecipeName\" method=\"post\" 　accept-charset=\"UTF-8\"\n");
      out.write("							action=\"/employmentWorks/cuisinedescription\">\n");
      out.write("							<input type=\"text\" value=\"");
      out.print( i );
      out.write("\" style=\"display: none;\"\n");
      out.write("								name=\"recipe_id\">\n");
      out.write("							<button type=\"submit\" class=\"allDishTitle\">\n");
      out.write("								<p>");
      out.print( StringAlignment.AlignmentTitle(RecipeIdTranslation.GetRecipeTitle()) );
      out.write("</p>\n");
      out.write("							</button>\n");
      out.write("						</form>\n");
      out.write("						<p class=\"allDishMaterial\">");
      out.print( StringAlignment.AlignmentIntroductoryEesay(RecipeIdTranslation.GetRecipeIntroductoryEesay()) );
      out.write("</p>\n");
      out.write("						<p class=\"allDishDescription\">");
      out.print( StringAlignment.AlignmentMaterial(RecipeIdTranslation.GetRecipeMaterial()) );
      out.write("</p>\n");
      out.write("						<p class=\"allDishName\">\n");
      out.write("							by\n");
      out.write("							");
      out.print( UserIdTranslation.GetUserName() );
      out.write("さん\n");
      out.write("						</p>\n");
      out.write("					</div>\n");
      out.write("				</div>\n");
      out.write("				");
 } 
      out.write("\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("		<!-- トップ右部(常時固定)_カレンダーやおすすめの表示 -->\n");
      out.write("		<div id=\"mainRight\">\n");
      out.write("			<!-- おすすめの表示 -->\n");
      out.write("			<div id=\"weekRecipe\">\n");
      out.write("				<p class=\"bold\">最近見たレシピ</p>\n");
      out.write("				<div>\n");
      out.write("					<a href=\"/employmentWorks/log\">一覧を見る</a> <img\n");
      out.write("						src=\"./allSource/image/icon/caret-right-fill.svg\" alt=\"右矢印\">\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("			<div class=\"mainRightData\">\n");
      out.write("				");

				if( user_id == null ){ 
				
      out.write("\n");
      out.write("				<ul>\n");
      out.write("					<li><img src=\"./allSource/image/icon/chevron-double-right.svg\"\n");
      out.write("						alt=\"\"> <a></a></li>\n");
      out.write("					<li><img src=\"./allSource/image/icon/chevron-double-right.svg\"\n");
      out.write("						alt=\"\">\n");
      out.write("						<p>-- 登録後利用可能 --</p></li>\n");
      out.write("					<li><img src=\"./allSource/image/icon/chevron-double-right.svg\"\n");
      out.write("						alt=\"\"> <a></a></li>\n");
      out.write("				</ul>\n");
      out.write("				");
} else {
					//履歴があるか確認
					File file = new File(userLogPath + user_id + ".txt");
					if(file.exists()){

						String tmp = ReadFile.GetData(userLogPath + user_id + ".txt");		//ユーザのログイン履歴を読み込む
						String[] allRecipeId = tmp.split(",");	//CSVファイル形式のデータを読み込みHashSetでデータの被りをなくす
				
						Set<Integer> numbers = new HashSet<>();
						for(String i : allRecipeId){
							numbers.add(Integer.parseInt(i));
							String deleterecipeid = DeleteRecipeId.Get(i);
							if(deleterecipeid == null){
								numbers.remove(Integer.parseInt(i));
							}
						}
						
						Integer count = numbers.size();
						
				
						ArrayList<Integer> arrayList = new ArrayList<>();
						for(Integer recipe : numbers){
							arrayList.add(recipe);
						}
					
						for(Integer i = 0; i < count; i++){
						//レシピIDを元に各種データを手にいれる
						RecipeIdTranslation.Translation(Integer.valueOf(arrayList.get(i)).toString());
						//ユーザIDを元に各種データを手にいれる
						UserIdTranslation.Translation(RecipeIdTranslation.GetUserID());
				
      out.write("\n");
      out.write("				<ul>\n");
      out.write("					<li><img src=\"./allSource/image/icon/chevron-double-right.svg\"\n");
      out.write("						alt=\"\"> \n");
      out.write("							<form method=\"post\" 　accept-charset=\"UTF-8\"\n");
      out.write("							action=\"/employmentWorks/cuisinedescription\">\n");
      out.write("							<input type=\"text\" value=\"");
      out.print( arrayList.get(i) );
      out.write("\" style=\"display: none;\"\n");
      out.write("								name=\"recipe_id\">\n");
      out.write("							<button type=\"submit\" class=\"allDishTitle\">\n");
      out.write("								<p>");
      out.print( StringAlignment.AlignmentSmallTitle(RecipeIdTranslation.GetRecipeTitle()) );
      out.write("</p>\n");
      out.write("							</button>\n");
      out.write("						</form>\n");
      out.write("					</li>\n");
      out.write("				</ul>\n");
      out.write("				");
 		}
						
					} else {
				
      out.write("\n");
      out.write("				<ul>\n");
      out.write("					<li><img src=\"./allSource/image/icon/chevron-double-right.svg\"\n");
      out.write("						alt=\"\"> <a></a></li>\n");
      out.write("					<li><img src=\"./allSource/image/icon/chevron-double-right.svg\"\n");
      out.write("						alt=\"\">\n");
      out.write("						<p>-- 閲覧履歴がありません --</p></li>\n");
      out.write("					<li><img src=\"./allSource/image/icon/chevron-double-right.svg\"\n");
      out.write("						alt=\"\"> <a></a></li>\n");
      out.write("				</ul>\n");
      out.write("				");

					}
					
				}
				
      out.write("\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("	</main>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("	<!-- フッターの設定 -->\n");
      out.write("	");
      out.write('\n');
 //文字エンコードの指定
	request.setCharacterEncoding("UTF-8");
	response.setCharacterEncoding("UTF-8");

      out.write("\n");
      out.write("    <footer>\n");
      out.write("        <div id=\"copyright\">copyrigt©️　2023 MurayamaKousuke. All rights reserved.</div>\n");
      out.write("    </footer>");
      out.write("\n");
      out.write("	</div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
